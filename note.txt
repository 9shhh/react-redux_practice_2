리액트 리덕스

리액트에서 리덕스를 사용하면, 상태 업데이트 관한 로직을 따로 분리하여 컴포넌트 파일과 별개로 관리할 수 있음. 
  => 유지보수 용이, 실제 업데이트가 필요한 컴포넌트만 리렌더링 되도록 쉽게 최적화 가능.

기존 바닐라 자바스트립트에서 리덕스를 사용할 때는 스토어의 내장 함수인 store.dispatch와 store.subscribe 함수를 사용.
  => 리액트에서 리덕스를 사용할 때는 store 인스턴스를 직접 사용하기보다 react-reudx라는 라이브러리에서 제공하는 유틸 함수 connect와 컴포넌트 Provider를 사용하여 작업을 처리함.

실습 흐름
프로젝트 준비 -> 프레젠테이셔널 컴포넌트 작성 -> 리덕스 관련 코드 작성 -> 컨테이너 컴포넌트 작성 -> 더 편하게 사용하는 법 알아보기

- 리액트 프로젝트에서 리덕스를 사용할 때 가장 많이 사용하는 패턴은 프레젠테이셔널 컴포넌트와 컨테이너 컴포넌트를 분리하는 것. 

- 프레젠테이셔널 컴포넌트 : 상태관리가 이루어지지 않고, 그저 props를 받아 와서 화면 UI를 보여 주기만 하는 컴포넌트
- 컨테이너 컴포넌트 : 리덕스와 연동되어 있는 컴포넌트로, 리덕스로부터 상태를 받아 오기도 하고 리덕스 스토어에 액션을 디스패치 하기도 함.

=> 이러한 패턴은 리덕스를 사용하는 데 필수 사항은 아님. 다만 이 패턴을 사용하면 코드의 재사용성과 관심사 분히가 이루어져 UI를 작성할 때 좀 더 집중할 수 있음.

- 리덕스를 사용할 때는 액션 타입, 액션 생성 함수, 리듀서를 작성함. 이 코드들을 각각 다른 파일에 작성하는 방법도 있고 (General pattern), 기능별로 묶어서 파일 하나에 작성하는 방법도 있음 (Ducks pattern).
  => Ducks pattern을 사용하여 액션 타입, 액션 생성 함수, 리듀서를 작성한 코드를 '모듈' 이라고 함.

- 루트 리듀서 : 프로젝트 안에 여러개의 리듀서를 하나로 합켜서 store에 전달 해야함. => 리덕스에서 제공하는 combineReducer 유틸 함수 사용.

- bindActionCreators 유틸 함수 : 액션을 디스패치하기 위해 각 액션 생성 함수를 호출하고 dispatch로 감싸는 번거로움을 줄여줌.
  => 추가로, 파라미터를 함수 형태가 아닌 액션 생성 함수로 이루어진 객체 형태로 넣어주면 connect 함수가 내부적으로 bindActionCreators 작업을 대신 해줌.

